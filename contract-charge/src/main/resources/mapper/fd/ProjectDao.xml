<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="zpepdi.system.dao.fd.ProjectDao">
    <resultMap id="ProjectMap" type="map">
        <id column="id" jdbcType="CHAR" property="id" />
        <result column="number" jdbcType="VARCHAR" property="number" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="first_party" jdbcType="VARCHAR" property="first_party" />
        <result column="task_resource" jdbcType="VARCHAR" property="task_resource" />
        <result column="type" jdbcType="INTEGER" property="type" />
        <result column="level" jdbcType="INTEGER" property="level" />
        <result column="is_off_shore" jdbcType="INTEGER" property="is_off_shore" />
        <result column="state" jdbcType="INTEGER" property="state" />
        <result column="province" jdbcType="VARCHAR" property="province" />
        <result column="build_place" jdbcType="VARCHAR" property="build_place" />
        <result column="build_type" jdbcType="VARCHAR" property="build_type" />
        <result column="dep" jdbcType="VARCHAR" property="dep" />
        <collection property="contractList" javaType="ARRAYLIST"
                    select="queryContractByProjectId"
                    column="id = id"></collection>
    </resultMap>
    <update id="setLedger" keyColumn="id" keyProperty="map.id" useGeneratedKeys="true">
        INSERT INTO general_project_ledger (
            <if test="map.id != null and map.id != ''">
                id,
            </if>
            project_id,
            `phase`,
            contract_id,
            `type`,
            ja_month,
            ja_verify_project_funds,
            ja_verify_safe_product,
            ja_verify_farmer_salary,
            ja_invoice_money,
            ja_invoice_rate,
            ja_invoice_date,
            ja_prepay,
            ja_reserved_works,
            ja_reserved_money,
            ja_network,
            ja_water_electricity,
            ja_quality_guarantee,
            ja_assessment,
            ja_injury_insurance,
            ja_management_fee,
            ja_deposit,
            ja_other_deduct,
            ja_sum_deduct,
            ja_project_payable,
            ja_project_funds,
            ja_farmer_salary,
            ja_safe_product,
            ja_actual_payment,
            ja_pay_date,
            sb_month,
            sb_invoice_money,
            sb_invoice_rate,
            sb_invoice_date,
            sb_prepay,
            sb_progress,
            sb_goods,
            sb_acceptance,
            sb_performance,
            sb_quality_guarantee,
            sb_deduct,
            sb_sum,
            sb_pay_date,
            sb_remarks,
            js_month,
            js_invoice_money,
            js_invoice_rate,
            js_invoice_date,
            js_prepay,
            js_progress,
            js_goods,
            js_acceptance,
            js_performance,
            js_quality_guarantee,
            js_deduct,
            js_sum,
            js_pay_date,
            js_remarks,
            `handler`,
            handle_time
        )
            VALUE(
        <if test="map.id != null and map.id != ''">
            #{map.id},
        </if>
            #{map.project_id},
            #{map.phase},
            #{map.contract_id},
            #{map.type},
            #{map.ja_month},
            #{map.ja_verify_project_funds},
            #{map.ja_verify_safe_product},
            #{map.ja_verify_farmer_salary},
            #{map.ja_invoice_money},
            #{map.ja_invoice_rate} / 100,
            #{map.ja_invoice_date},
            #{map.ja_prepay},
            #{map.ja_reserved_works},
            #{map.ja_reserved_money},
            #{map.ja_network},
            #{map.ja_water_electricity},
            #{map.ja_quality_guarantee},
            #{map.ja_assessment},
            #{map.ja_injury_insurance},
            #{map.ja_management_fee},
            #{map.ja_deposit},
            #{map.ja_other_deduct},
            #{map.ja_sum_deduct},
            #{map.ja_project_payable},
            #{map.ja_project_funds},
            #{map.ja_farmer_salary},
            #{map.ja_safe_product},
            #{map.ja_actual_payment},
            #{map.ja_pay_date},
            #{map.sb_month},
            #{map.sb_invoice_money},
            #{map.sb_invoice_rate} / 100,
            #{map.sb_invoice_date},
            #{map.sb_prepay},
            #{map.sb_progress},
            #{map.sb_goods},
            #{map.sb_acceptance},
            #{map.sb_performance},
            #{map.sb_quality_guarantee},
            #{map.sb_deduct},
            #{map.sb_sum},
            #{map.sb_pay_date},
            #{map.sb_remarks},
            #{map.js_month},
            #{map.js_invoice_money},
            #{map.js_invoice_rate} / 100,
            #{map.js_invoice_date},
            #{map.js_prepay},
            #{map.js_progress},
            #{map.js_goods},
            #{map.js_acceptance},
            #{map.js_performance},
            #{map.js_quality_guarantee},
            #{map.js_deduct},
            #{map.js_sum},
            #{map.js_pay_date},
            #{map.js_remarks},
            #{userId},
            now())
        on duplicate key update
         phase = values(phase),
         contract_id = values(contract_id),
         `type` = values(`type`),
         ja_month = values(ja_month),
         ja_verify_project_funds = values(ja_verify_project_funds),
         ja_verify_safe_product = values(ja_verify_safe_product),
         ja_verify_farmer_salary = values(ja_verify_farmer_salary),
         ja_invoice_money = values(ja_invoice_money),
         ja_invoice_rate = values(ja_invoice_rate),
         ja_invoice_date = values(ja_invoice_date),
         ja_prepay = values(ja_prepay),
         ja_reserved_works = values(ja_reserved_works),
         ja_reserved_money = values(ja_reserved_money),
         ja_network = values(ja_network),
         ja_water_electricity = values(ja_water_electricity),
         ja_quality_guarantee = values(ja_quality_guarantee),
         ja_assessment = values(ja_assessment),
         ja_injury_insurance = values(ja_injury_insurance),
         ja_management_fee = values(ja_management_fee),
         ja_deposit = values(ja_deposit),
         ja_other_deduct = values(ja_other_deduct),
         ja_sum_deduct = values(ja_sum_deduct),
         ja_project_payable = values(ja_project_payable),
         ja_project_funds = values(ja_project_funds),
         ja_farmer_salary = values(ja_farmer_salary),
         ja_safe_product = values(ja_safe_product),
         ja_actual_payment = values(ja_actual_payment),
         ja_pay_date = values(ja_pay_date),
         sb_month = values(sb_month),
         sb_invoice_money = values(sb_invoice_money),
         sb_invoice_rate = values(sb_invoice_rate),
         sb_invoice_date = values(sb_invoice_date),
         sb_prepay = values(sb_prepay),
         sb_progress = values(sb_progress),
         sb_goods = values(sb_goods),
         sb_acceptance = values(sb_acceptance),
         sb_performance = values(sb_performance),
         sb_quality_guarantee = values(sb_quality_guarantee),
         sb_deduct = values(sb_deduct),
         sb_sum = values(sb_sum),
         sb_pay_date = values(sb_pay_date),
         sb_remarks = values(sb_remarks),
         js_month = values(js_month),
         js_invoice_money = values(js_invoice_money),
         js_invoice_rate = values(js_invoice_rate),
         js_invoice_date = values(js_invoice_date),
         js_prepay = values(js_prepay),
         js_progress = values(js_progress),
         js_goods = values(js_goods),
         js_acceptance = values(js_acceptance),
         js_performance = values(js_performance),
         js_quality_guarantee = values(js_quality_guarantee),
         js_deduct = values(js_deduct),
         js_sum = values(js_sum),
         js_pay_date = values(js_pay_date),
         js_remarks = values(js_remarks),
         `handler` = values(handler),
         handle_time = values(handle_time)
    </update>
    <select id="query" resultType="java.util.Map">
        SELECT
            id,
            number,
            `name`,
            first_party,
            task_resource,
            type,
            `level`,
            is_off_shore,
            state,
            province,
            build_place,
            build_type,
            dep
        FROM
            market_project
    </select>
    <select id="queryById" resultMap="ProjectMap">
        SELECT
            id,
            number,
            `name`,
            first_party,
            task_resource,
            type,
            `level`,
            is_off_shore,
            state,
            province,
            build_place,
            build_type,
            dep
        FROM
            market_project
        where id = #{id}
    </select>
    <select id="queryContractByProjectId" resultType="java.util.Map">
        SELECT
            c.id, c.number, c.`name`, c.money
        FROM contract_relate_project cp,
             contract c
        WHERE  cp.project_id = #{id}
          AND c.id = cp.contract_id
    </select>
    <select id="queryLedger" resultType="java.util.Map">
        select
            g.id,
            g.project_id,
            g.phase,
            g.contract_id,
            c.number,
            c.name,
            c.money,
            g.`type`,
            g.ja_month,
            g.ja_verify_project_funds,
            g.ja_verify_safe_product,
            g.ja_verify_farmer_salary,
            g.ja_invoice_money,
            g.ja_invoice_rate * 100 as ja_invoice_rate,
            cast(g.ja_invoice_date as CHAR(10))as ja_invoice_date ,
            g.ja_prepay,
            g.ja_reserved_works,
            g.ja_reserved_money,
            g.ja_network,
            g.ja_water_electricity,
            g.ja_quality_guarantee,
            g.ja_assessment,
            g.ja_injury_insurance,
            g.ja_management_fee,
            g.ja_deposit,
            g.ja_other_deduct,
            g.ja_sum_deduct,
            g.ja_project_payable,
            g.ja_project_funds,
            g.ja_farmer_salary,
            g.ja_safe_product,
            g.ja_actual_payment,
            cast(g.ja_pay_date as CHAR(10))as ja_pay_date ,
            g.sb_month,
            g.sb_invoice_money,
            g.sb_invoice_rate * 100 as sb_invoice_rate,
            cast(g.sb_invoice_date as CHAR(10))as sb_invoice_date ,
            g.sb_prepay,
            g.sb_progress,
            g.sb_goods,
            g.sb_acceptance,
            g.sb_performance,
            g.sb_quality_guarantee,
            g.sb_deduct,
            g.sb_sum,
            cast(g.sb_pay_date as CHAR(10))as sb_pay_date ,
            g.sb_remarks,
            g.js_month,
            g.js_invoice_money,
            g.js_invoice_rate * 100 as js_invoice_rate,
            cast(g.js_invoice_date as CHAR(10))as js_invoice_date ,
            g.js_prepay,
            g.js_progress,
            g.js_goods,
            g.js_acceptance,
            g.js_performance,
            g.js_quality_guarantee,
            g.js_deduct,
            g.js_sum,
            cast(g.js_pay_date as CHAR(10))as js_pay_date ,
            g.js_remarks,
            g.`handler`,
            g.handle_time
        from general_project_ledger g,
             contract c
        where g.project_id = #{id}
            and g.contract_id = c.id
    </select>
</mapper>